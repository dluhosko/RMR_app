#include "mainwindow.h"
#include "ui_mainwindow.h"
#include <math.h>
#include<vector>
#include "navigation.h"

std::vector<POINT> points;

int counter;
iRobotCreate *robot;
rplidar *lidar;
Navigation *nav;

MainWindow::MainWindow(QWidget *parent) :
    QMainWindow(parent),
    ui(new Ui::MainWindow)
{
 //
    ui->setupUi(this);
    robot = new iRobotCreate();
    lidar = new rplidar();

   // lidar->connect("/dev/laser");
   // lidar->enable();
   // lidar->start();

     points.clear();
    nav = new Navigation(robot, 0.7, 10);
}

MainWindow::~MainWindow()
{
    delete ui;
}


int MainWindow::demoCallback(CreateSensors inputData,void *ioPointer)
{
    MainWindow *currentWindow=(MainWindow*)ioPointer;
  //  currentWindow->update();
    QString vystup = "Neplatny udaj.";
   static double x = 0;
   static double y = 0;
   static double fi = 0;

   //Suradnice
   fi += inputData.Angle*DEG2RAD;
   if (fi > 2*M_PI)
	fi -= 2*M_PI;
   if (fi < 0)
	fi += 2*M_PI;

    x += inputData.Distance * cos(fi);
    y += inputData.Distance * sin(fi);

   
    nav->setPosition(x,y,fi);

   if (counter < points.size()){
    vystup = "ide na ciel" + QString::number(counter);
    printf("\n ziadany smer %f %f\n",points[counter].x, points[counter].y);

         if (nav->goToPoint(points[counter].x,points[counter].y)){
             //robot->move(0,0);
             sleep(1);
             vystup = "v cieli" + QString::number(counter);
              counter++;
        //sleep(2);
	}
 
    } else robot->move(0, 0);
  
    //DEBUG info
    printf("\n x: %f, y : %f, fi: %f\n",x,y,fi*RAD2DEG);
    //printf("ziadany uhol %f\n", request_angle* RAD2DEG);


    //nepotrebne k praci
    //vystup = "x: " +  QString::number(x) + " y: " + QString::number(y) + "\nfi: " + QString::number(fi*RAD2DEG);

    currentWindow->ui->label->setText(vystup);
   //printf("nejde\n");
    //printf("data %i\n",inputData.BatteryCapacity);

}

void MainWindow::on_pushButton_clicked()
{
    robot->ConnectToPort("/dev/robot",this);
    connect( this, SIGNAL( showMB() ), this, SLOT( showMessageBox() ), Qt::BlockingQueuedConnection );



    robot->dataProcess(this,&demoCallback);
}

void MainWindow::on_pushButton_2_clicked()
{

   // robot->move(50, -50);

    counter = 0;

    points.clear();
    POINT p;
    p.x = 1000;
    p.y = 0;
    points.push_back(p);

    p.x = 1000;
    p.y = 2000;
    points.push_back(p);

    p.x = 3300;
    p.y = 2000;
    points.push_back(p);
/*
    p.x = 0;
    p.y = 0;
    points.push_back(p);
*/

   // robot.move(-35,35);
    //usleep(1000*1000);
    robot->move(0,0);
}
